Branch indexing
 > git rev-parse --resolve-git-dir /var/jenkins_home/caches/git-6447c6d120c88838909ed2f5733d6145/.git # timeout=10
Setting origin to https://github.com/KishanK001/week6-project.git
 > git config remote.origin.url https://github.com/KishanK001/week6-project.git # timeout=10
Fetching origin...
Fetching upstream changes from origin
 > git --version # timeout=10
 > git --version # 'git version 2.30.2'
 > git config --get remote.origin.url # timeout=10
using GIT_ASKPASS to set credentials 
 > git fetch --tags --force --progress -- origin +refs/heads/*:refs/remotes/origin/* # timeout=10
Seen branch in repository origin/feature
Seen branch in repository origin/main
Seen 2 remote branches
Obtained Jenkinsfile from 9f52351d4e9c965da0939b4148c4fc26e994782a
Running in Durability level: MAX_SURVIVABILITY
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/jenkins_home/workspace/week6-project-multi_feature
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
using credential git-account
 > git rev-parse --resolve-git-dir /var/jenkins_home/workspace/week6-project-multi_feature/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/KishanK001/week6-project.git # timeout=10
Fetching without tags
Fetching upstream changes from https://github.com/KishanK001/week6-project.git
 > git --version # timeout=10
 > git --version # 'git version 2.30.2'
using GIT_ASKPASS to set credentials 
 > git fetch --no-tags --force --progress -- https://github.com/KishanK001/week6-project.git +refs/heads/*:refs/remotes/origin/* # timeout=10
Checking out Revision 9f52351d4e9c965da0939b4148c4fc26e994782a (feature)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 9f52351d4e9c965da0939b4148c4fc26e994782a # timeout=10
Commit message: "fixed branch name"
 > git rev-list --no-walk 9f52351d4e9c965da0939b4148c4fc26e994782a # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Compile)
[Pipeline] sh
+ chmod +x ./gradlew
+ ./gradlew compileJava
Starting a Gradle Daemon (subsequent builds will be faster)
> Task :compileJava UP-TO-DATE

BUILD SUCCESSFUL in 10s
1 actionable task: 1 up-to-date
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Unit test)
[Pipeline] sh
+ ./gradlew test
> Task :compileJava UP-TO-DATE
> Task :processResources UP-TO-DATE
> Task :classes UP-TO-DATE
> Task :compileTestJava UP-TO-DATE
> Task :processTestResources UP-TO-DATE
> Task :testClasses UP-TO-DATE
> Task :test UP-TO-DATE

BUILD SUCCESSFUL in 3s
5 actionable tasks: 5 up-to-date
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Code coverage)
Stage "Code coverage" skipped due to when conditional
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Static code analysis)
[Pipeline] sh
+ ./gradlew checkstyleMain
> Task :compileJava UP-TO-DATE
> Task :processResources UP-TO-DATE
> Task :classes UP-TO-DATE
> Task :checkstyleMain UP-TO-DATE

BUILD SUCCESSFUL in 2s
3 actionable tasks: 3 up-to-date
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Package)
[Pipeline] sh
+ ./gradlew build
> Task :compileJava UP-TO-DATE
> Task :processResources UP-TO-DATE
> Task :classes UP-TO-DATE
> Task :bootJar UP-TO-DATE
> Task :jar SKIPPED
> Task :assemble UP-TO-DATE
> Task :checkstyleMain UP-TO-DATE
> Task :compileTestJava UP-TO-DATE
> Task :processTestResources UP-TO-DATE
> Task :testClasses UP-TO-DATE
> Task :checkstyleTest SKIPPED
> Task :test UP-TO-DATE
> Task :check UP-TO-DATE
> Task :build UP-TO-DATE

BUILD SUCCESSFUL in 3s
7 actionable tasks: 7 up-to-date
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Update version)
[Pipeline] sh
+ sed -i s/{{VERSION}}/5/g calculator.yaml
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
